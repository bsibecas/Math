#!/usr/bin/python3

import sys
import math

def usage():
    print("USAGE")
    print("    ./104intersection opt xp yp zp xv yv zv p\n")
    print("DESCRIPTION")
    print("    opt             surface option: 1 for a sphere, 2 for a cylinder, 3 for a cone")
    print("    (xp, yp, zp)    coordinates of a point by which the light ray passes through")
    print("    (xv, yv, zv)    coordinates of a vector parallel to the light ray")
    print("    p               parameter: radius of the sphere, radius of the cylinder, or")
    print("                    angle formed by the cone and the Z-axis")


def try_int(nb):
    try:
        int(nb)
    except ValueError:
        return False
    else:
        return True


def verify_int():
    i = 1

    while i != 9:
        if not try_int(sys.argv[i]):
            print("Incorrect type of argument, integer expected")
            return 84
        else:
            i = i + 1
    return 0


def rigor():

    if len(sys.argv) == 2 and sys.argv[1] == "-h":
        usage()
        return 84
    if len(sys.argv) != 9:
        print("Incorrect number of arguments")
        return 84
    verify = verify_int()
    if verify != 0:
        return 84
    if int(sys.argv[1]) == 1 or int(sys.argv[1]) == 2:
        if int(sys.argv[8]) <= 0:
            print("Incorrect radius, it cannot be a negative number or 0" )
            return 84
    return 0

def inter_points(t, xp, yp, zp, xv, yv, zv):

    x = xp + xv * t
    y = yp + yv * t
    z = zp + zv * t
    print("(%.3f, %.3f, %.3f)" % (x, y, z))


def pos_solution(a, b, dis, xp, yp, zp, xv, yv, zv):
    x0 = (- b + math.sqrt(dis)) / (2 * a)
    inter_points(x0, xp, yp, zp, xv, yv, zv)
    x1 = (- b - math.sqrt(dis)) / (2 * a)
    inter_points(x1, xp, yp, zp, xv, yv, zv)
    return x0, x1


def one_solution(a, b, xp, yp, zp, xv, yv, zv):
    x = - b / (2 * a)
    inter_points(x, xp, yp, zp, xv, yv, zv)


def discriminant(a, b, c, xp, yp, zp, xv, yv, zv):
    dis = (b * b) - (4 * a * c)

    if a == 0:
        print("There is an infinite number of intersection points.")
        exit(0)
    if dis < 0:
        print("No intersection point.")
        exit(0)
    elif dis == 0:
        print("1 intersection point:")
        one_solution(a, b, xp, yp, zp, xv, yv, zv)
    elif dis > 0:
        print("2 intersection points:")
        pos_solution(a, b, dis, xp, yp, zp, xv, yv, zv)


def sphere_calcul(xp, yp, zp, xv, yv, zv, p):
    x = (xv * xv + yv * yv + zv * zv)
    y = (2 * xp * xv + 2 * yp * yv + 2 * zp * zv)
    z = (xp * xp + yp * yp + zp * zp) - p * p
    return x, y, z


def cylinder_calcul(xp, yp, xv, yv, p):
    x = (xv * xv + yv * yv)
    y = (2 * xv * xp + 2 * yv * yp)
    z = (xp * xp + yp * yp) - p * p
    return x, y, z


def cone_calcul(xp, yp, zp, xv, yv, zv, p):
    x = (xv * xv + yv * yv - (math.tan(math.radians(p))**2) * (zv * zv))
    y = (2 * (xp * xv + yp * yv - (math.tan(math.radians(p))**2 *zp * zv)))
    z = (xp * xp + yp * yp - (math.tan(math.radians(p))**2 * (zp * zp)))
    return x, y, z


def find_equ(xp, yp, zp, xv, yv, zv, p):
    equation = 0

    if int(sys.argv[1]) == 1:
        print("Sphere of radius", p)
        equation = sphere_calcul(xp, yp, zp, xv, yv, zv, p)
    elif int(sys.argv[1]) == 2:
        print("Cylinder of radius", p)
        equation = cylinder_calcul(xp, yp, xv, yv, p)
    elif int(sys.argv[1]) == 3:
        print("Cone with a", p, "degree angle")
        equation = cone_calcul(xp, yp, zp, xv, yv, zv, p)
    else:
        usage()
        exit(84)
    return equation


def find_inter(xp, yp, zp, xv, yv, zv, p):
    point = (xp, yp, zp)
    vector = (xv, yv, zv)
    equation = find_equ(xp, yp, zp, xv, yv, zv, p)
    print("Line passing through the point", point, "and parallel to the vector", vector)
    discriminant(equation[0], equation[1], equation[2], xp, yp, zp, xv, yv, zv)


def main():
    error = rigor()
    if error != 0:
        exit(84)

    xp = int(sys.argv[2])
    yp = int(sys.argv[3])
    zp = int(sys.argv[4])
    xv = int(sys.argv[5])
    yv = int(sys.argv[6])
    zv = int(sys.argv[7])
    p = int(sys.argv[8])

    find_inter(xp, yp, zp, xv, yv, zv, p)

    exit(0)


main()